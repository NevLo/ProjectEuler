# Project Euler problem 12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

def findNumberOfFactors(num):
    numFactors = 1
    for i in range(1,int(num/2)+1):
        if(num % i == 0):
            numFactors += 1
    return numFactors

def findTriangularNum(num):
    sum = (num * (num + 1)) / 2
    return int(sum)

if __name__ == "__main__":
    i = 1
    found = False
    while(not found):
        trinum = findTriangularNum(i)
        numFactors = findNumberOfFactors(trinum)
        print(f"trinum: {trinum}  numFacts: {numFactors}       ", end="\r")
        if(numFactors > 500):
            print(f"The first triangular number with more than 500 factors is {trinum}")
            found = True
        i += 1